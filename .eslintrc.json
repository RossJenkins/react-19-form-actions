{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "globals": {
    "define": false,
    "ga": false,
    "require": false
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:react/recommended",
    "plugin:promise/recommended",
    "plugin:react-hooks/recommended"
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "linebreak-style": ["error", "unix"],
    "quotes": ["error", "single", { "avoidEscape": true }],
    "semi": ["error", "always"],
    "eqeqeq": ["error", "smart"],
    "no-extra-boolean-cast": "off",
    "no-var": "error",
    "no-console": "error",
    "react/prop-types": "off",
    "promise/catch-or-return": "off",
    "promise/always-return": "off",
    "promise/no-promise-in-callback": "error",
    "no-restricted-globals": [
      "error",
      {
        "name": "self",
        "message": "You probably want to use const self = this; rather than access window.self"
      }
    ],
    "no-use-before-define": ["error"],
    "no-promise-executor-return": "error",
    "default-case-last": "error",
    "no-loss-of-precision": "error",
    "no-useless-backreference": "error",
    "no-unexpected-multiline": "off",
    "no-throw-literal": "error",

    // unicorn rules, see https://github.com/sindresorhus/eslint-plugin-unicorn
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/expiring-todo-comments": "error",
    "unicorn/explicit-length-check": "warn",
    "unicorn/import-style": "error",
    "unicorn/new-for-builtins": "error",
    "unicorn/no-abusive-eslint-disable": "error",
    "unicorn/no-array-callback-reference": "off",
    "unicorn/no-console-spaces": "error",
    "unicorn/no-for-loop": "error",
    "unicorn/no-hex-escape": "error",
    "unicorn/no-instanceof-array": "error",
    "unicorn/no-lonely-if": "error",
    "unicorn/no-new-array": "error",
    "unicorn/no-new-buffer": "error",
    "unicorn/no-object-as-default-parameter": "error",
    "unicorn/no-process-exit": "error",
    "unicorn/no-unreadable-array-destructuring": "error",
    "unicorn/no-unsafe-regex": "off",
    "unicorn/no-zero-fractions": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/numeric-separators-style": "off",
    "unicorn/prefer-array-find": "error",
    "unicorn/prefer-array-flat-map": "error",
    "unicorn/prefer-array-index-of": "error",
    "unicorn/prefer-array-some": "warn",
    "unicorn/prefer-date-now": "error",
    "unicorn/prefer-includes": "warn",
    "unicorn/prefer-keyboard-event-key": "error",
    "unicorn/prefer-math-trunc": "error",
    "unicorn/prefer-modern-dom-apis": "error",
    "unicorn/prefer-number-properties": "error",
    "unicorn/prefer-string-starts-ends-with": "error",
    "unicorn/prefer-string-trim-start-end": "error",
    "unicorn/prefer-type-error": "error",
    "unicorn/throw-new-error": "error",

    // React Rules
    "react-hooks/exhaustive-deps": "error",
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react/hook-use-state": ["error", { "allowDestructuredState": true }],
    "react/jsx-no-useless-fragment": [
      "error",
      {
        "allowExpressions": true // required for typescript
      }
    ],
    "react/jsx-pascal-case": "error",
    "react/no-unstable-nested-components": "error",
    "react/jsx-curly-brace-presence": [
      "error",
      { "props": "never", "children": "never", "propElementValues": "always" }
    ],
    "react/jsx-boolean-value": ["error", "always"],

    // TypeScript Specific rules / plugin switches
    "@typescript-eslint/no-this-alias": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/restrict-template-expressions": "off",

    //Type-aware TypeScript rules that we should probably turn on (they are currently off because they require migration work)
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/unbound-method": "off",
    "@typescript-eslint/no-unsafe-enum-comparison": "off",
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/await-thenable": "off",
    "@typescript-eslint/restrict-plus-operands": "off",
    "@typescript-eslint/no-redundant-type-constituents": "off",
    "@typescript-eslint/no-base-to-string": "off"
  },
  "parserOptions": {
    "sourceType": "module",
    "ecmaVersion": 2019,
    "ecmaFeatures": {
      "jsx": true
    },
    "project": true,
    "tsconfigRootDir": "."
  },
  "plugins": ["promise", "unicorn", "@typescript-eslint"],
  "ignorePatterns": ["node_modules/*", "vendor/*", "src/assets/js/linkedin-insight-tag/*"],
  "overrides": [
    {
      "files": ["**/*.test.js"],
      "env": {
        "jest": true
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@typescript-eslint/disable-type-checked"]
    }
  ]
}
